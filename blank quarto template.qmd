---
title: "Title" 
subtitle: "Subtitle"
institute: "Newcastle upon Tyne Hospitals NHS Foundation Trust"
author: "Daniel Weiand" 
date: today
date-format: "dddd, D MMMM, YYYY"
self-contained: true

# #Some options need to be set in format > html
format:
  html:
    #output-file: 'file' #Output file to write to
    #output-ext: #Extension to use for generated output file
    code-fold: false
    code_download: true
    embed-resources: true
    standalone: true
    toc: true #Include an automatically generated table of contents. This option has no effect if standalone is false.
    toc-depth: 2 #Specify the number of section levels to include in the table of contents. The default is 3
    toc_float: TRUE
    highlight-style: pygments
    fig-path: 'figures/'
    fig-width: 9 #default is 7
    fig-asp: 0.618 #When fig-asp is specified, the height of a plot (the option fig-height) is calculated from fig-width * fig-asp (the golden ratio is 0.618).
    # fig-height: 6 #default is 7
    fig-align: 'left' #Possible values are default, left, right, and center.
    fig-format: 'png' #The graphical device to generate plot files. retina, png, jpeg, svg, or pdf
    fig-cap-location: 'top' #top bottom or margin
    fig-dpi: 300 #The DPI (dots per inch) for bitmap devices (default = 72)
    df-print: paged #kable, tibble or paged. The default printing method is kable.
    theme: 
    - mystyle.scss
    - default #Quarto includes 25 themes from the Bootswatch project (for example, the website uses the cosmo theme). Available themes include: default cerulean cosmo cyborg darkly flatly journal litera lumen lux materia minty morph pulse quartz sandstone simplex sketchy slate solar spacelab superhero united vapor yeti zephyr
    
# #Some options need to be set in format > docx
# format:
#   docx:
#     reference-doc: word-styles-reference-01.docx #Word document that will be used as a style reference in producing final docx (Word) document
#     toc: true #Include an automatically generated table of contents. This option has no effect if standalone is false.
#     toc-depth: 1 #Specify the number of section levels to include in the table of contents. The default is 3
#     toc-title: 'Table of Contents' #The title used for the table of contents.
#     page-width: 6.5 #Target page width for output (used to compute columns widths for layout divs). Defaults to 6.5 inches, which corresponds to default letter page settings in docx and odt.
#     fig-path: 'figures/'
#     fig-width: 5 #default is 7
#     fig-asp: 0.618 #When fig-asp is specified, the height of a plot (the option fig-height) is calculated from fig-width * fig-asp (the golden ratio is 0.618).
#     # fig-height: 6 #default is 7
#     fig-align: 'center' #Possible values are default, left, right, and center.
#     fig-format: 'svg' #The graphical device to generate plot files. retina, png, jpeg, svg, or pdf
#     fig-cap-location: 'top' #top bottom or margin
#     fig-dpi: 300 #The DPI (dots per inch) for bitmap devices (default = 72)
#     df-print: default #kable, tibble or paged. The default printing method is kable.

# # Some options need to be set in format > revealjs
# format:
#   revealjs:
#     incremental: true #Incrementally reveal elements https://rstudio-conf-2022.github.io/get-started-quarto/materials/05-presentations.html#/lists
#     width: 1600
#     height: 900
#     #css: ["mystyle.css"]
#     default-image-extension: png
#     theme: serif #full list of available themes: beige blood dark default league moon night serif simple sky solarized
#     scrollable: true
#     smaller: true
#     transition: fade
#     transition-speed: fast
#     reference-location: document #If you prefer that footnotes be included at the end of the document, specify the reference-location: document option
#     logo: Newcastlelaboratories_logo.png
#     #footer: "Footer text"
#     menu:
#       side: left #Navigation Menu location
#       width: normal    #Navigation Menu width
#       numbers: true 	#Add slide numbers to menu items.
#     slide-number: c/t #c/t = Slide number / total slides (default)
#     show-slide-number: all #all = Show slide numbers in all contexts (default)
#     embed-resources: true
#     standalone: true

#Some referencing options need to be set in bibliography:, csl:, and link-citations:
bibliography: biblio.bib  #Document bibliography (BibTeX or CSL). May be a single file or a list of files
csl: bmj.csl #Citation Style Language file to use for formatting references.
link-citations: yes

#Some code chunk options need to be set in execute (credit: @rappa753)
execute:
  echo: FALSE #Include cell source code in rendered output. 
  warning: FALSE #If FALSE, all warnings will be printed in the console instead of the output document
  error: TRUE #By default, the code evaluation will not stop even in case of errors! If we want to stop on errors, we need to set this option to FALSE.
  message: FALSE #Whether to preserve messages emitted by message() (similar to the option warning
  cache: FALSE #use the cache option to cache the results of computations. You may however need to manually refresh the cache if you know that some other input (or even time) has changed sufficiently to warrant an update. To do this, render either individual files or an entire project using the --cache-refresh option, e.g. [terminal] quarto render mydoc.qmd --cache-refresh # single doc or [terminal] quarto render --cache-refresh # entire project

editor: source

# parameters for report

params:
  param1: "NA"

---

```{r project_setup}
#| eval: true
#| include: false
#| echo: false
#| error: false
#| message: false
#| label: project setup

#Project setup
options(stringsAsFactors = FALSE)
options(scipen = 1, digits = 2)
options(knitr.kable.NA = '')
ggplot2::theme_set(ggplot2::theme_minimal())

#renv
library(renv)
# renv::init()
renv::activate()
# renv::snapshot()

#package load
library(tidyverse) # includes the {purrr} package
library(lubridate) # for working with date-time datasets
library(here) # for correctly loading files/data
library(knitr) # for dynamic report generation in R
library(quarto) # new open-source technical publishing system from RStudio/Posit
library(skimr) # for quick analysis of larger datasets
library(nycflights13)

#set up {here}
here::set_here()
here::here()

```

```{r data_import}
#| eval: true
#| include: false
#| echo: false
#| error: false
#| message: false
#| label: data_import

# data import -------------------------------------------------------------

flights <- nycflights13::flights

```

```{r params_wrangle}
#| eval: true
#| include: false
#| echo: false
#| error: false
#| message: false
#| label: params_wrangle

# # parameters for report (in YAML)
#
# params:
#   param1: "NA"

# set up params / parameterised reporting --------------------------------------

# Can render an individual parameterised report by typing the below into the RStudio terminal and replacing XXXXX with one of the parameter's subcategories, e.g. for origin:"EWR", or "LGA", or "JFK"  
# quarto render parameterised_quarto_report.qmd -P origin:XXXXX

# params for param1

if (!is.na(params$param1) && params$param1 != "NA") {
  flights <- flights[flights$param1 == params$param1, ]
}
if (nrow(flights) == 0) {
  stop("Invalid selection. Did you misspell `param1`?")
}

```

```{r data_wrangle}
#| eval: true
#| include: false
#| echo: false
#| error: false
#| message: false
#| label: data_wrangle

# Wrangle -------------------------------------------------------



```

# Parameter(s) for report

This report focuses on the following parameter(s):

param1: **`r params$param1`**

# What is Quarto?

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

## Where to begin?

Start by:

-   choosing the right **YAML** settings (including **format:**, **execute:**, and **knitr:**); and,

-   creating appropriate **.docx**, **.bib**, and **.csl** files (which need to be located in the main project directory)

# YAML setup in Quarto

Quarto files start with Yet Another Markup Language (YAML) code. 

## .csl file

Citation Style Language (CSL) styles are used to format references according to requirements of journal Editors and publishers.

For example, you may wish to render your references in Harvard style, including the title of each manuscript, as required by some Elsevier publications. To do so, simply search the [Zotero Style Repository](https://www.zotero.org/styles) and download the `elsevier-harvard.csl` file, saving it to your project directory. This file needs to be referred to using the `csl` YAML metadata field, as shown above.

## .css files

These files can be used to, for example, add double spacing to the final, rendered document. To do so, first create a .css file called `mystyle.css` in your project directory. This file needs to be referred to using the `css` YAML metadata field, as shown above. To add double spacing, the file should contain only the following text:

```{r}
#| echo: true
#| include: false
#| eval: false
#| code-overflow: wrap
#| code-line-numbers: "|"

p {line-height: 2em;}
```

## .bib files

Quarto supports bibliography files in a wide variety of formats including BibLaTeX and CSL. Add a bibliography to your document using the `bibliography` YAML metadata field.

# Next...

Your .qmd file should outline which packages need to be loaded. For example:

```{r}
#| include: true
#| eval: false
#| echo: true
#| code-overflow: wrap
#| code-line-numbers: "|"

library(here) #For correctly loading files/data
library(knitr) #General-purpose tool for dynamic report generation in R
```

# Zotero

Zotero can be used to put selected references in a plain text file with the extension .bib, in BibTex format.

For example, we may wish to cite the following journal article: [Anh√∏j, J., Olesen, A.V., 2014. Run charts revisited: A simulation study of run chart rules for detection of non-random variation in health care processes. PLoS One 9, e113825](https://doi.org/10.1371/journal.pone.0113825)

To do so, simply load the reference into Zotero to produce a plain text file in BibTex format (.bib):

```{r}
#| include: true
#| echo: true
#| eval: false
#| code-overflow: wrap
#| code-line-numbers: "|"

@article{anhoj2014run,
  title = {Run Charts Revisited: A Simulation Study of Run Chart Rules for Detection of Non-Random Variation in Health Care Processes},
  author = {Anh√∏j, Jacob and Olesen, Anne Vingaard},
  date = {2014},
  journaltitle = {PLoS One},
  volume = {9},
  number = {11},
  pages = {e113825},
  publisher = {{Public Library of Science San Francisco, USA}}
}
```

## Inserting citations in Quarto (conventional method)

Normally, citations go inside square brackets, with each journal article referenced using a single string of characters, defined in Zotero. In the example above, you could cite the paper in question by typing...

```{r}
#| include: true
#| echo: true
#| eval: false
#| code-overflow: wrap
#| code-line-numbers: "|"

Blah blah [@anhoj2014run].
@anhoj2014run says blah.
Blah blah [see @anhoj2014run].
```

...which turns into:

Blah blah [@anhoj2014run] @anhoj2014run says blah. Blah blah [see @anhoj2014run].

# Cross-referencing functionality in Quarto

Cross References make it easier for readers to navigate documents by providing numbered references and hyperlinks to various entities like figures, tables, and equations.

For example, the following code...

```{r}
#| eval: false
#| echo: true
#| include: true
#| code-overflow: wrap
#| code-line-numbers: "|"

@fig-airquality further explores the impact of temperature on ozone level.
```

...will cross-reference to the following figure, using the label tag

```{r}
#| echo: true
#| eval: false
#| include: true
#| code-overflow: wrap
#| code-line-numbers: "|"

library(ggplot2)

ggplot(airquality, aes(Temp, Ozone)) + 
  geom_point() + 
  geom_smooth(method = "loess")
```

This is how it looks in practice:

@fig-airquality further explores the impact of temperature on ozone level.

```{r}
#| label: fig-airquality
#| fig-cap: Temperature and ozone level.
#| warning: false
#| code-overflow: wrap

library(ggplot2)

ggplot(airquality, aes(Temp, Ozone)) + 
  geom_point() + 
  geom_smooth(method = "loess")
```

# References {.unnumbered}

References can be added to the rendered document by adding a div with the id `#refs` at the location in your document where you'd like the bibliography to be generated:

```{r}
#| include: true
#| eval: false
#| echo: true
#| code-overflow: wrap
#| code-line-numbers: "|"

# References {.unnumbered}

::: {#refs}
:::
```

The resulting list of references looks like this:

::: {#refs}
:::

# Code example: Parameter-specifying statements

Parameters can be specified in YAML

```{r}
#| eval: false
#| include: true
#| echo: true
#| error: false
#| message: false
#| code-overflow: wrap
#| code-line-numbers: "|2-4|5-8|9-12|15"
---
title: "Parameterised report"                         # Metadata
subtitle: "Analysis of the {nycflights13} dataset"
author: "Daniel Weiand"
format:                             # Set format types
  html:                                     
  docx:
  revealjs: 
params:                             # Set default parameter key-value pairs
  origin: "NA" 
  dest: "NA"                  
  month: "NA"    
---
    
Report content goes here.           # Write content
```

# Appendix

Text entered after the div with the id #refs will come after the list of references, which may be useful when adding appendices, for example.
